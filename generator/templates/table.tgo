{{ $sqlizerType := printf "%sSqlizer" $.Entity }}
{{ $sqlizerImpl := printf "_%sSqlizer" $.Entity }}
{{ $queryType := printf "%sQueryBuilder" $.Entity }}
{{ $columnType := printf "%sColumnExpr" $.Entity }}
{{ $orderType := printf "%sOrderExpr" $.Entity }}

func init() {
    metaSchema.Register({{ $.Entity }}{})
}

type {{ $sqlizerType }} interface {
    squirrel.Sqlizer

    {{ $.Entity }}ToSql() (string, []interface{}, error)
}

type {{ $sqlizerImpl }} struct {
    squirrel.Sqlizer
}

func (sqlizer *{{ $sqlizerImpl }}) {{ $.Entity }}ToSql() (string, []interface{}, error) {
    return sqlizer.ToSql()
}

type {{ $columnType }} interface {
    {{ $.Entity }}ColumnExpr() string

    String() string
}

type {{ $orderType }} interface {
    {{ $.Entity }}OrderExpr() string
}

type {{ $queryType }} struct {
    dbc *goen.DBContext

    includeLoaders goen.IncludeLoaderList

    builder squirrel.SelectBuilder
}

func new{{ $queryType }}(dbc *goen.DBContext) {{ $queryType }} {
    stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbc.Dialect().PlaceholderFormat())
    metaT := metaSchema.LoadOf(&{{ $.Entity }}{})
    return {{ $queryType }}{
        dbc: dbc,
        // columns provided later
        builder: stmtBuilder.Select().From(dbc.Dialect().Quote(metaT.TableName())),
    }
}

func (qb {{ $queryType }}) Include(loaders ...goen.IncludeLoader) {{ $queryType }} {
    qb.includeLoaders.Append(loaders...)
    return qb
}

func (qb {{ $queryType }}) Where(conds ...{{ $sqlizerType }}) {{ $queryType }} {
    for _, cond := range conds {
        qb.builder = qb.builder.Where(cond)
    }
    return qb
}

func (qb {{ $queryType }}) WhereRaw(conds ...squirrel.Sqlizer) {{ $queryType }} {
    for _, cond := range conds {
        qb.builder = qb.builder.Where(cond)
    }
    return qb
}

func (qb {{ $queryType }}) Offset(offset uint64) {{ $queryType }} {
    qb.builder = qb.builder.Offset(offset)
    return qb
}

func (qb {{ $queryType }}) Limit(limit uint64) {{ $queryType }} {
    qb.builder = qb.builder.Limit(limit)
    return qb
}

func (qb {{ $queryType }}) OrderBy(orderBys ...{{ $orderType }}) {{ $queryType }} {
    exprs := make([]string, len(orderBys))
    for i := range orderBys {
        exprs[i] = orderBys[i].{{ $.Entity }}OrderExpr()
    }
    qb.builder = qb.builder.OrderBy(exprs...)
    return qb
}

func (qb {{ $queryType }}) Count() (int64, error) {
    return qb.CountContext(context.Background())
}

func (qb {{ $queryType }}) CountContext(ctx context.Context) (int64, error) {
    query, args, err := qb.builder.Columns("count(*)").ToSql()
    if err != nil {
        return 0, err
    }

    var count int64
    row := qb.dbc.QueryRowContext(ctx, query, args...)
    if err := row.Scan(&count); err != nil {
        return 0, err
    }
    return count, nil
}

func (qb {{ $queryType }}) Query() ([]*{{ $.Entity }}, error) {
    return qb.QueryContext(context.Background())
}

func (qb {{ $queryType }}) QueryContext(ctx context.Context) ([]*{{ $.Entity }}, error) {
    return qb.query(ctx)
}

func (qb {{ $queryType }}) QueryRow() (*{{ $.Entity }}, error) {
    return qb.QueryRowContext(context.Background())
}

func (qb {{ $queryType }}) QueryRowContext(ctx context.Context) (*{{ $.Entity }}, error) {
    qb.builder = qb.builder.Limit(1)
    if records, err := qb.query(ctx); err != nil {
        return nil, err
    } else if len(records) == 0 {
        return nil, sql.ErrNoRows
    } else {
        return records[0], nil
    }
}

func (qb {{ $queryType }}) query(ctx context.Context) ([]*{{ $.Entity }}, error) {
    // for caching reason, wont support filtering columns
    metaT := metaSchema.LoadOf(&{{ $.Entity }}{})
    cols := make([]string, len(metaT.Columns()))
    for i := range metaT.Columns() {
        cols[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
    }

    query, args, err := qb.builder.Columns(cols...).ToSql()
    if err != nil {
        return nil, err
    }
    rows, err := qb.dbc.QueryContext(ctx, query, args...)
    if err != nil {
        return nil, err
    }

    var records []*{{ $.Entity }}
    if err := qb.dbc.Scan(rows, &records); err != nil {
        rows.Close()
        return nil, err
    }
    rows.Close()

    sc := goen.NewScopeCache(metaSchema)
    for _, record := range records {
        sc.AddObject(record)
    }
    if err := qb.dbc.IncludeContext(ctx, records, sc, qb.includeLoaders); err != nil {
        return nil, err
    }

    return records, nil
}

// ToSqlizer returns Sqlizer that built by {{ $queryType }} with given columns.
// The columns defaults to all columns of {{ $.Entity }}, if columns is zero-length.
func (qb {{ $queryType }}) ToSqlizer(columns ...string) {{ $sqlizerType }} {
    if len(columns) == 0 {
        metaT := metaSchema.LoadOf(&{{ $.Entity }}{})
        columns = make([]string, len(metaT.Columns()))
        for i := range metaT.Columns() {
            columns[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
        }
    }
    // only return, not to set qb.builder.
    return &{{ $sqlizerImpl}}{qb.builder.Columns(columns...)}
}

{{ range $column := $.Columns }}

{{ $typ := printf "_%s_%s" $.Entity $column.FieldName }}
{{ $columnOrderType := printf "_%s_%s_OrderExpr" $.Entity $column.FieldName }}

type {{ $columnOrderType }} string

func (s {{ $columnOrderType }}) {{ $.Entity }}OrderExpr() string {
    return string(s)
}

type {{ $typ }} struct {
    bs string
    qs string
}

// {{ $.Entity }}ColumnExpr implements {{ $columnOrderType }}.
func (c {{ $typ }}) {{ $.Entity }}ColumnExpr() string {
    return c.QuotedString()
}

// String gets bare column name.
func (c {{ $typ }}) String() string {
    return c.bs
}

// QuotedString gets quoted column name.
func (c {{ $typ }}) QuotedString() string {
    return c.qs
}

func (c {{ $typ }}) Eq(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Eq{c.QuotedString(): v}}
}

func (c {{ $typ }}) NotEq(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.NotEq{c.QuotedString(): v}}
}

func (c {{ $typ }}) In(v ...{{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Eq{c.QuotedString(): v}}
}

func (c {{ $typ }}) NotIn(v ...{{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.NotEq{c.QuotedString(): v}}
}

func (c {{ $typ }}) Like(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Expr(c.QuotedString() + " LIKE ?", v)}
}

func (c {{ $typ }}) NotLike(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Expr(c.QuotedString() + " NOT LIKE ?", v)}
}

func (c {{ $typ }}) Lt(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Lt{c.QuotedString(): v}}
}

func (c {{ $typ }}) LtOrEq(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c {{ $typ }}) Gt(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Gt{c.QuotedString(): v}}
}

func (c {{ $typ }}) GtOrEq(v {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c {{ $typ }}) Between(v1, v2 {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Expr(c.QuotedString() + " BETWEEN ? AND ?", v1, v2)}
}

func (c {{ $typ }}) NotBetween(v1, v2 {{ $column.FieldType }}) {{ $sqlizerType }} {
    return &{{ $sqlizerImpl}}{squirrel.Expr(c.QuotedString() + " NOT BETWEEN ? AND ?", v1, v2)}
}

func (c {{ $typ }}) Asc() {{ $orderType }} {
    return {{ $columnOrderType }}(c.QuotedString())
}

func (c {{ $typ }}) Desc() {{ $orderType }} {
    return {{ $columnOrderType }}(c.QuotedString() + " DESC")
}

{{ end }}

{{ $dbsetType := printf "%sDBSet" $.Entity }}

type {{ $dbsetType }} struct {
    dbc *goen.DBContext

    {{ range $column := $.Columns -}}
    {{ $typ := printf "_%s_%s" $.Entity $column.FieldName -}}
    {{ $column.FieldName }} {{ $typ }}
    {{ end }}

    {{ range $rel := $.OneToManyRelations }}
    Include{{ $rel.FieldName }} goen.IncludeLoader
    {{ end }}
    {{ range $rel := $.ManyToOneRelations }}
    Include{{ $rel.FieldName }} goen.IncludeLoader
    {{ end }}
    {{ range $rel := $.OneToOneRelations }}
    Include{{ $rel.FieldName }} goen.IncludeLoader
    {{ end }}
}

func new{{ $dbsetType }}(dbc *goen.DBContext) *{{ $dbsetType }} {
    dbset := &{{ $dbsetType }}{
        dbc: dbc,
    }
    {{ range $column := $.Columns -}}
    {{ $typ := printf "_%s_%s" $.Entity $column.FieldName -}}
    dbset.{{ $column.FieldName }} = {{ $typ }}{"{{ $column.ColumnName }}", dbc.Dialect().Quote("{{ $column.ColumnName }}")}
    {{ end }}
    {{ range $rel := $.OneToManyRelations }}
    dbset.Include{{ $rel.FieldName }} = goen.IncludeLoaderFunc(dbset.include{{ $rel.FieldName }})
    {{ end }}
    {{ range $rel := $.ManyToOneRelations }}
    dbset.Include{{ $rel.FieldName }} = goen.IncludeLoaderFunc(dbset.include{{ $rel.FieldName }})
    {{ end }}
    {{ range $rel := $.OneToOneRelations }}
    dbset.Include{{ $rel.FieldName }} = goen.IncludeLoaderFunc(dbset.include{{ $rel.FieldName }})
    {{ end }}
    return dbset
}

// String gets bare table name
func (dbset *{{ $dbsetType }}) String() string {
    return "{{ $.TableName }}"
}

// QuotedString gets quoted table name
func (dbset *{{ $dbsetType }}) QuotedString() string {
    return dbset.dbc.Dialect().Quote("{{ $.TableName }}")
}

{{ if not $.ReadOnly }}
func (dbset *{{ $dbsetType }}) Insert(v *{{ $.Entity }}) {
    dbset.dbc.Patch(metaSchema.InsertPatchOf(v))
}
{{ end }}

func (dbset *{{ $dbsetType }}) Select() {{ $queryType }} {
    return new{{ $queryType }}(dbset.dbc)
}

{{ if not $.ReadOnly }}
func (dbset *{{ $dbsetType }}) Update(v *{{ $.Entity }}) {
    dbset.dbc.Patch(metaSchema.UpdatePatchOf(v))
}
{{ end }}

{{ if not $.ReadOnly }}
func (dbset *{{ $dbsetType }}) Delete(v *{{ $.Entity }}) {
    dbset.dbc.Patch(metaSchema.DeletePatchOf(v))
}
{{ end }}

{{/* one-to-many relations begin */}}
{{ range $rel := $.OneToManyRelations }}

func (dbset *{{ $dbsetType }}) include{{ $rel.FieldName }}(ctx context.Context, later *goen.IncludeBuffer, sc *goen.ScopeCache, records interface{}) error {
    entities, ok := records.([]*{{ $.Entity }})
    if !ok {
        return nil
    }

    childRowKeyOf := func(v *{{ $.Entity }}) goen.RowKey {
        return &goen.MapRowKey{
            Table: "{{ $rel.TableName }}",
            Key: map[string]interface{}{
                {{ range $i, $fk := $rel.ForeignKeys -}}
                {{ $refe := index $rel.References $i -}}
                "{{ $refe.ColumnName }}": v.{{ $fk.FieldName }},
                {{ end -}}
            },
        }
    }

    // filter cached entity
    cachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
    noCachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
    for _, entity := range entities {
        key := childRowKeyOf(entity)
        if sc.HasObject(goen.CardinalityOneToMany, key) {
            cachedChildRowKeys = append(cachedChildRowKeys, key)
        } else {
            noCachedChildRowKeys = append(noCachedChildRowKeys, key)
        }
    }
    if len(noCachedChildRowKeys) > 0 {
        cond := squirrel.Or{}
        for _, rowKey := range noCachedChildRowKeys {
            cond = append(cond, rowKey)
        }
        stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbset.dbc.Dialect().PlaceholderFormat())
        query, args, err := stmtBuilder.Select(
            {{ range $name := $rel.ColumnNames -}}
            dbset.dbc.Dialect().Quote("{{ $name }}"),
            {{ end -}}
            ).From(dbset.dbc.Dialect().Quote("{{ $rel.TableName }}")).Where(cond).ToSql()
        if err != nil {
            return err
        }
        rows, err := dbset.dbc.QueryContext(ctx, query, args...)
        if err != nil {
            return err
        }

        var noCachedEntities []*{{ $rel.FieldType }}
        if err := dbset.dbc.Scan(rows, &noCachedEntities); err != nil {
            rows.Close()
            return err
        }
        rows.Close()

        for _, entity := range noCachedEntities {
            sc.AddObject(entity)
        }

        // for newly loaded entity, to be filled by includeLoader
        later.AddRecords(noCachedEntities)
    }

    for _, entity := range entities {
        childRowKey := childRowKeyOf(entity)
        raw := sc.GetObject(goen.CardinalityOneToMany, childRowKey)
        if refes, ok := raw.([]interface{}); ok {
            for _, refe := range refes {
                entity.{{ $rel.FieldName }} = append(entity.{{ $rel.FieldName }}, refe.(*{{ $rel.FieldType }}))
            }
        }
    }

    return nil
}

{{ end }}
{{/* one-to-many relations end */}}

{{/* many-to-one relations begin */}}
{{ range $rel := $.ManyToOneRelations }}

func (dbset *{{ $dbsetType }}) include{{ $rel.FieldName }}(ctx context.Context, later *goen.IncludeBuffer, sc *goen.ScopeCache, records interface{}) error {
    entities, ok := records.([]*{{ $.Entity }})
    if !ok {
        return nil
    }

    parentRowKeyOf := func(v *{{ $.Entity }}) goen.RowKey {
        return &goen.MapRowKey{
            Table: "{{ $rel.TableName }}",
            Key: map[string]interface{}{
                {{ range $i, $fk := $rel.ForeignKeys -}}
                {{ $refe := index $rel.References $i -}}
                "{{ $refe.ColumnName }}": v.{{ $fk.FieldName }},
                {{ end -}}
            },
        }
    }

    // filter cached entity
    cachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
    noCachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
    for _, entity := range entities {
        key := parentRowKeyOf(entity)
        if sc.HasObject(goen.CardinalityManyToOne, key) {
            cachedChildRowKeys = append(cachedChildRowKeys, key)
        } else {
            noCachedChildRowKeys = append(noCachedChildRowKeys, key)
        }
    }
    if len(noCachedChildRowKeys) > 0 {
        cond := squirrel.Or{}
        for _, rowKey := range noCachedChildRowKeys {
            cond = append(cond, rowKey)
        }
        stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbset.dbc.Dialect().PlaceholderFormat())
        query, args, err := stmtBuilder.Select(
            {{ range $name := $rel.ColumnNames -}}
            dbset.dbc.Dialect().Quote("{{ $name }}"),
            {{ end -}}
            ).From(dbset.dbc.Dialect().Quote("{{ $rel.TableName }}")).Where(cond).ToSql()
        if err != nil {
            return err
        }
        rows, err := dbset.dbc.QueryContext(ctx, query, args...)
        if err != nil {
            return err
        }

        var noCachedEntities []*{{ $rel.FieldType }}
        if err := dbset.dbc.Scan(rows, &noCachedEntities); err != nil {
            rows.Close()
            return err
        }
        rows.Close()

        for _, entity := range noCachedEntities {
            sc.AddObject(entity)
        }

        // for newly loaded entity, to be filled by includeLoader
        later.AddRecords(noCachedEntities)
    }

    for _, entity := range entities {
        parentRowKey := parentRowKeyOf(entity)
        raw := sc.GetObject(goen.CardinalityManyToOne, parentRowKey)
        if castover, ok := raw.(*{{ $rel.FieldType }}); ok {
            entity.{{ $rel.FieldName }} = castover
        }
    }

    return nil
}

{{ end }}
{{/* many-to-one relations end */}}

{{/* one-to-one relations begin */}}
{{ range $rel := $.OneToOneRelations }}

{{ end }}
{{/* one-to-one relations end */}}
