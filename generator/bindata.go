// Code generated by "esc -o bindata.go -pkg generator -private templates/"; DO NOT EDIT.

package generator

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/context.tgo": {
		name:    "context.tgo",
		local:   "templates/context.tgo",
		size:    856,
		modtime: 1578966143,
		compressed: `
H4sIAAAAAAAC/8ySQW6zMBSE95xiFOX/BSjlAEjZULrNpvQA2H5BSNSk+KEQIe5e2QRIUBupXZUVfp43
mvlkvpwIafJca6aOYbhpJaP3ACAsatLRfOm5Yd+jyXVB2HIuKkK8xzbK7K/BMEySrRKGOLPm8R6nptR8
xOafSZNX4s11N3rRXPLldm01R3jvtShJK3saPO/YaokDneecvirziiQf8neyhUpd7KAEQvNRRWkSIFz6
jkWVkDamq/udk7UInLohbhuN/7NsNLHfPIqt526eP4L2dC31G3Lr3RW+GJrOa4K+EjK4i2ZZTk4LUqu7
QRXgzVDW+dyNILPuC5CyqrXLrYRcHk40bf6En7P6owRdtscMPwMAAP//m3s0c1gDAAA=
`,
	},

	"/templates/root.tgo": {
		name:    "root.tgo",
		local:   "templates/root.tgo",
		size:    510,
		modtime: 1578966143,
		compressed: `
H4sIAAAAAAAC/4SPzY6bMBSF936KI5TFzKL2fqpZNamK1PxIoQ9gzA22AjayL2kjxLtXhqQ/q9ldzv24
57NS+BIaQkueomZqUN9hmYf0plTr2I61NKFXV907Y10zqjaQ/4ztEYdjhd22rFB9K8/4Wn7fSaEUfiRC
uICtS0hhjIZgcoNLaMONol87NPZlhc4Z8onAVjOM9qgJlzD6Bs7nY2wJF9cRumAWu+A/tkOkISTHId6l
EIM2V90SpgkbeVo/DronzLMQrh9CZLwIAJmI2reEzSN+e8dGlsuc8Gmen9RjLx9nUPyTnTRbzHPxZMk3
y6+vQtx0RE+sz8ZSr/GOLCsP9HP/J3x5FeKvBuu6o9WiymPKztMEpn7oNBOKhZDchuJJr0Ruze/7DzbB
M/3iFZd5/zsAAP//K5RKj/4BAAA=
`,
	},

	"/templates/table.tgo": {
		name:    "table.tgo",
		local:   "templates/table.tgo",
		size:    15686,
		modtime: 1580440696,
		compressed: `
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
+alr1F2qT+dopaP27ZD9vwAAAP//1v13NkY9AAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates/": {
		_escData["/templates/context.tgo"],
		_escData["/templates/root.tgo"],
		_escData["/templates/table.tgo"],
	},
}
