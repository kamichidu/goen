// Code generated by https://github.com/kamichidu/goen; DO NOT EDIT THIS FILE.
// Use of this source code is governed by a MIT license that can be found in
// the file located on https://github.com/kamichidu/goen repository.

package example

import (
	"context"
	"database/sql"
	time "time"

	"github.com/Masterminds/squirrel"
	"github.com/kamichidu/goen"
	github_com_satori_go_uuid "github.com/satori/go.uuid"
)

var metaSchema = goen.NewMetaSchema()

func init() {
	metaSchema.Register(Blog{})
}

type BlogSqlizer interface {
	squirrel.Sqlizer

	BlogToSql() (string, []interface{}, error)
}

type _BlogSqlizer struct {
	squirrel.Sqlizer
}

func (sqlizer *_BlogSqlizer) BlogToSql() (string, []interface{}, error) {
	return sqlizer.ToSql()
}

type BlogColumnExpr interface {
	BlogColumnExpr() string

	String() string
}

type BlogOrderExpr interface {
	BlogOrderExpr() string
}

type BlogQueryBuilder struct {
	dbc *goen.DBContext

	includeLoaders goen.IncludeLoaderList

	builder squirrel.SelectBuilder
}

func newBlogQueryBuilder(dbc *goen.DBContext) BlogQueryBuilder {
	stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbc.Dialect().PlaceholderFormat())
	metaT := metaSchema.LoadOf(&Blog{})
	return BlogQueryBuilder{
		dbc: dbc,
		// columns provided later
		builder: stmtBuilder.Select().From(dbc.Dialect().Quote(metaT.TableName())),
	}
}

func (qb BlogQueryBuilder) Include(loaders ...goen.IncludeLoader) BlogQueryBuilder {
	qb.includeLoaders.Append(loaders...)
	return qb
}

func (qb BlogQueryBuilder) Where(conds ...BlogSqlizer) BlogQueryBuilder {
	for _, cond := range conds {
		qb.builder = qb.builder.Where(cond)
	}
	return qb
}

func (qb BlogQueryBuilder) WhereRaw(conds ...squirrel.Sqlizer) BlogQueryBuilder {
	for _, cond := range conds {
		qb.builder = qb.builder.Where(cond)
	}
	return qb
}

func (qb BlogQueryBuilder) Offset(offset uint64) BlogQueryBuilder {
	qb.builder = qb.builder.Offset(offset)
	return qb
}

func (qb BlogQueryBuilder) Limit(limit uint64) BlogQueryBuilder {
	qb.builder = qb.builder.Limit(limit)
	return qb
}

func (qb BlogQueryBuilder) OrderBy(orderBys ...BlogOrderExpr) BlogQueryBuilder {
	exprs := make([]string, len(orderBys))
	for i := range orderBys {
		exprs[i] = orderBys[i].BlogOrderExpr()
	}
	qb.builder = qb.builder.OrderBy(exprs...)
	return qb
}

func (qb BlogQueryBuilder) Count() (int64, error) {
	return qb.CountContext(context.Background())
}

func (qb BlogQueryBuilder) CountContext(ctx context.Context) (int64, error) {
	query, args, err := qb.builder.Columns("count(*)").ToSql()
	if err != nil {
		return 0, err
	}

	var count int64
	row := qb.dbc.QueryRowContext(ctx, query, args...)
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

func (qb BlogQueryBuilder) Query() ([]*Blog, error) {
	return qb.QueryContext(context.Background())
}

func (qb BlogQueryBuilder) QueryContext(ctx context.Context) ([]*Blog, error) {
	return qb.query(ctx)
}

func (qb BlogQueryBuilder) QueryRow() (*Blog, error) {
	return qb.QueryRowContext(context.Background())
}

func (qb BlogQueryBuilder) QueryRowContext(ctx context.Context) (*Blog, error) {
	qb.builder = qb.builder.Limit(1)
	if records, err := qb.query(ctx); err != nil {
		return nil, err
	} else if len(records) == 0 {
		return nil, sql.ErrNoRows
	} else {
		return records[0], nil
	}
}

func (qb BlogQueryBuilder) query(ctx context.Context) ([]*Blog, error) {
	// for caching reason, wont support filtering columns
	metaT := metaSchema.LoadOf(&Blog{})
	cols := make([]string, len(metaT.Columns()))
	for i := range metaT.Columns() {
		cols[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
	}

	query, args, err := qb.builder.Columns(cols...).ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := qb.dbc.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}

	var records []*Blog
	if err := qb.dbc.Scan(rows, &records); err != nil {
		rows.Close()
		return nil, err
	}
	rows.Close()

	sc := goen.NewScopeCache(metaSchema)
	for _, record := range records {
		sc.AddObject(record)
	}
	if err := qb.dbc.IncludeContext(ctx, records, sc, qb.includeLoaders); err != nil {
		return nil, err
	}

	return records, nil
}

// ToSqlizer returns Sqlizer that built by BlogQueryBuilder with given columns.
// The columns defaults to all columns of Blog, if columns is zero-length.
func (qb BlogQueryBuilder) ToSqlizer(columns ...string) BlogSqlizer {
	if len(columns) == 0 {
		metaT := metaSchema.LoadOf(&Blog{})
		columns = make([]string, len(metaT.Columns()))
		for i := range metaT.Columns() {
			columns[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
		}
	}
	// only return, not to set qb.builder.
	return &_BlogSqlizer{qb.builder.Columns(columns...)}
}

type _Blog_BlogID_OrderExpr string

func (s _Blog_BlogID_OrderExpr) BlogOrderExpr() string {
	return string(s)
}

type _Blog_BlogID struct {
	bs string
	qs string
}

// BlogColumnExpr implements _Blog_BlogID_OrderExpr.
func (c _Blog_BlogID) BlogColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Blog_BlogID) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Blog_BlogID) QuotedString() string {
	return c.qs
}

func (c _Blog_BlogID) Eq(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) NotEq(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) In(v ...github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) NotIn(v ...github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) Like(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Blog_BlogID) NotLike(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Blog_BlogID) Lt(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Blog_BlogID) LtOrEq(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) Gt(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Blog_BlogID) GtOrEq(v github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Blog_BlogID) Between(v1, v2 github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_BlogID) NotBetween(v1, v2 github_com_satori_go_uuid.UUID) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_BlogID) Asc() BlogOrderExpr {
	return _Blog_BlogID_OrderExpr(c.QuotedString())
}

func (c _Blog_BlogID) Desc() BlogOrderExpr {
	return _Blog_BlogID_OrderExpr(c.QuotedString() + " DESC")
}

type _Blog_Name_OrderExpr string

func (s _Blog_Name_OrderExpr) BlogOrderExpr() string {
	return string(s)
}

type _Blog_Name struct {
	bs string
	qs string
}

// BlogColumnExpr implements _Blog_Name_OrderExpr.
func (c _Blog_Name) BlogColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Blog_Name) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Blog_Name) QuotedString() string {
	return c.qs
}

func (c _Blog_Name) Eq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_Name) NotEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_Name) In(v ...string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_Name) NotIn(v ...string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_Name) Like(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Blog_Name) NotLike(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Blog_Name) Lt(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Blog_Name) LtOrEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Blog_Name) Gt(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Blog_Name) GtOrEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Blog_Name) Between(v1, v2 string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_Name) NotBetween(v1, v2 string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_Name) Asc() BlogOrderExpr {
	return _Blog_Name_OrderExpr(c.QuotedString())
}

func (c _Blog_Name) Desc() BlogOrderExpr {
	return _Blog_Name_OrderExpr(c.QuotedString() + " DESC")
}

type _Blog_Author_OrderExpr string

func (s _Blog_Author_OrderExpr) BlogOrderExpr() string {
	return string(s)
}

type _Blog_Author struct {
	bs string
	qs string
}

// BlogColumnExpr implements _Blog_Author_OrderExpr.
func (c _Blog_Author) BlogColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Blog_Author) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Blog_Author) QuotedString() string {
	return c.qs
}

func (c _Blog_Author) Eq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_Author) NotEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_Author) In(v ...string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Blog_Author) NotIn(v ...string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Blog_Author) Like(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Blog_Author) NotLike(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Blog_Author) Lt(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Blog_Author) LtOrEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Blog_Author) Gt(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Blog_Author) GtOrEq(v string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Blog_Author) Between(v1, v2 string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_Author) NotBetween(v1, v2 string) BlogSqlizer {
	return &_BlogSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Blog_Author) Asc() BlogOrderExpr {
	return _Blog_Author_OrderExpr(c.QuotedString())
}

func (c _Blog_Author) Desc() BlogOrderExpr {
	return _Blog_Author_OrderExpr(c.QuotedString() + " DESC")
}

type BlogDBSet struct {
	dbc *goen.DBContext

	BlogID _Blog_BlogID
	Name   _Blog_Name
	Author _Blog_Author

	IncludePosts goen.IncludeLoader
}

func newBlogDBSet(dbc *goen.DBContext) *BlogDBSet {
	dbset := &BlogDBSet{
		dbc: dbc,
	}
	dbset.BlogID = _Blog_BlogID{"blog_id", dbc.Dialect().Quote("blog_id")}
	dbset.Name = _Blog_Name{"name", dbc.Dialect().Quote("name")}
	dbset.Author = _Blog_Author{"author", dbc.Dialect().Quote("author")}

	dbset.IncludePosts = goen.IncludeLoaderFunc(dbset.includePosts)

	return dbset
}

// String gets bare table name
func (dbset *BlogDBSet) String() string {
	return "blogs"
}

// QuotedString gets quoted table name
func (dbset *BlogDBSet) QuotedString() string {
	return dbset.dbc.Dialect().Quote("blogs")
}

func (dbset *BlogDBSet) Insert(v *Blog) {
	dbset.dbc.Patch(metaSchema.InsertPatchOf(v))
}

func (dbset *BlogDBSet) Select() BlogQueryBuilder {
	return newBlogQueryBuilder(dbset.dbc)
}

func (dbset *BlogDBSet) Update(v *Blog) {
	dbset.dbc.Patch(metaSchema.UpdatePatchOf(v))
}

func (dbset *BlogDBSet) Delete(v *Blog) {
	dbset.dbc.Patch(metaSchema.DeletePatchOf(v))
}

func (dbset *BlogDBSet) includePosts(ctx context.Context, later *goen.IncludeBuffer, sc *goen.ScopeCache, records interface{}) error {
	entities, ok := records.([]*Blog)
	if !ok {
		return nil
	}

	childRowKeyOf := func(v *Blog) goen.RowKey {
		return &goen.MapRowKey{
			Table: "posts",
			Key: map[string]interface{}{
				"blog_id": v.BlogID,
			},
		}
	}

	// filter cached entity
	cachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
	noCachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
	for _, entity := range entities {
		key := childRowKeyOf(entity)
		if sc.HasObject(goen.CardinalityOneToMany, key) {
			cachedChildRowKeys = append(cachedChildRowKeys, key)
		} else {
			noCachedChildRowKeys = append(noCachedChildRowKeys, key)
		}
	}
	if len(noCachedChildRowKeys) > 0 {
		cond := squirrel.Or{}
		for _, rowKey := range noCachedChildRowKeys {
			cond = append(cond, rowKey)
		}
		stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbset.dbc.Dialect().PlaceholderFormat())
		query, args, err := stmtBuilder.Select(
			dbset.dbc.Dialect().Quote("created_at"),
			dbset.dbc.Dialect().Quote("updated_at"),
			dbset.dbc.Dialect().Quote("deleted_at"),
			dbset.dbc.Dialect().Quote("blog_id"),
			dbset.dbc.Dialect().Quote("post_id"),
			dbset.dbc.Dialect().Quote("title"),
			dbset.dbc.Dialect().Quote("content"),
			dbset.dbc.Dialect().Quote("order"),
		).From(dbset.dbc.Dialect().Quote("posts")).Where(cond).ToSql()
		if err != nil {
			return err
		}
		rows, err := dbset.dbc.QueryContext(ctx, query, args...)
		if err != nil {
			return err
		}

		var noCachedEntities []*Post
		if err := dbset.dbc.Scan(rows, &noCachedEntities); err != nil {
			rows.Close()
			return err
		}
		rows.Close()

		for _, entity := range noCachedEntities {
			sc.AddObject(entity)
		}

		// for newly loaded entity, to be filled by includeLoader
		later.AddRecords(noCachedEntities)
	}

	for _, entity := range entities {
		childRowKey := childRowKeyOf(entity)
		raw := sc.GetObject(goen.CardinalityOneToMany, childRowKey)
		if refes, ok := raw.([]interface{}); ok {
			for _, refe := range refes {
				entity.Posts = append(entity.Posts, refe.(*Post))
			}
		}
	}

	return nil
}

func init() {
	metaSchema.Register(Post{})
}

type PostSqlizer interface {
	squirrel.Sqlizer

	PostToSql() (string, []interface{}, error)
}

type _PostSqlizer struct {
	squirrel.Sqlizer
}

func (sqlizer *_PostSqlizer) PostToSql() (string, []interface{}, error) {
	return sqlizer.ToSql()
}

type PostColumnExpr interface {
	PostColumnExpr() string

	String() string
}

type PostOrderExpr interface {
	PostOrderExpr() string
}

type PostQueryBuilder struct {
	dbc *goen.DBContext

	includeLoaders goen.IncludeLoaderList

	builder squirrel.SelectBuilder
}

func newPostQueryBuilder(dbc *goen.DBContext) PostQueryBuilder {
	stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbc.Dialect().PlaceholderFormat())
	metaT := metaSchema.LoadOf(&Post{})
	return PostQueryBuilder{
		dbc: dbc,
		// columns provided later
		builder: stmtBuilder.Select().From(dbc.Dialect().Quote(metaT.TableName())),
	}
}

func (qb PostQueryBuilder) Include(loaders ...goen.IncludeLoader) PostQueryBuilder {
	qb.includeLoaders.Append(loaders...)
	return qb
}

func (qb PostQueryBuilder) Where(conds ...PostSqlizer) PostQueryBuilder {
	for _, cond := range conds {
		qb.builder = qb.builder.Where(cond)
	}
	return qb
}

func (qb PostQueryBuilder) WhereRaw(conds ...squirrel.Sqlizer) PostQueryBuilder {
	for _, cond := range conds {
		qb.builder = qb.builder.Where(cond)
	}
	return qb
}

func (qb PostQueryBuilder) Offset(offset uint64) PostQueryBuilder {
	qb.builder = qb.builder.Offset(offset)
	return qb
}

func (qb PostQueryBuilder) Limit(limit uint64) PostQueryBuilder {
	qb.builder = qb.builder.Limit(limit)
	return qb
}

func (qb PostQueryBuilder) OrderBy(orderBys ...PostOrderExpr) PostQueryBuilder {
	exprs := make([]string, len(orderBys))
	for i := range orderBys {
		exprs[i] = orderBys[i].PostOrderExpr()
	}
	qb.builder = qb.builder.OrderBy(exprs...)
	return qb
}

func (qb PostQueryBuilder) Count() (int64, error) {
	return qb.CountContext(context.Background())
}

func (qb PostQueryBuilder) CountContext(ctx context.Context) (int64, error) {
	query, args, err := qb.builder.Columns("count(*)").ToSql()
	if err != nil {
		return 0, err
	}

	var count int64
	row := qb.dbc.QueryRowContext(ctx, query, args...)
	if err := row.Scan(&count); err != nil {
		return 0, err
	}
	return count, nil
}

func (qb PostQueryBuilder) Query() ([]*Post, error) {
	return qb.QueryContext(context.Background())
}

func (qb PostQueryBuilder) QueryContext(ctx context.Context) ([]*Post, error) {
	return qb.query(ctx)
}

func (qb PostQueryBuilder) QueryRow() (*Post, error) {
	return qb.QueryRowContext(context.Background())
}

func (qb PostQueryBuilder) QueryRowContext(ctx context.Context) (*Post, error) {
	qb.builder = qb.builder.Limit(1)
	if records, err := qb.query(ctx); err != nil {
		return nil, err
	} else if len(records) == 0 {
		return nil, sql.ErrNoRows
	} else {
		return records[0], nil
	}
}

func (qb PostQueryBuilder) query(ctx context.Context) ([]*Post, error) {
	// for caching reason, wont support filtering columns
	metaT := metaSchema.LoadOf(&Post{})
	cols := make([]string, len(metaT.Columns()))
	for i := range metaT.Columns() {
		cols[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
	}

	query, args, err := qb.builder.Columns(cols...).ToSql()
	if err != nil {
		return nil, err
	}
	rows, err := qb.dbc.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}

	var records []*Post
	if err := qb.dbc.Scan(rows, &records); err != nil {
		rows.Close()
		return nil, err
	}
	rows.Close()

	sc := goen.NewScopeCache(metaSchema)
	for _, record := range records {
		sc.AddObject(record)
	}
	if err := qb.dbc.IncludeContext(ctx, records, sc, qb.includeLoaders); err != nil {
		return nil, err
	}

	return records, nil
}

// ToSqlizer returns Sqlizer that built by PostQueryBuilder with given columns.
// The columns defaults to all columns of Post, if columns is zero-length.
func (qb PostQueryBuilder) ToSqlizer(columns ...string) PostSqlizer {
	if len(columns) == 0 {
		metaT := metaSchema.LoadOf(&Post{})
		columns = make([]string, len(metaT.Columns()))
		for i := range metaT.Columns() {
			columns[i] = qb.dbc.Dialect().Quote(metaT.Columns()[i].ColumnName())
		}
	}
	// only return, not to set qb.builder.
	return &_PostSqlizer{qb.builder.Columns(columns...)}
}

type _Post_CreatedAt_OrderExpr string

func (s _Post_CreatedAt_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_CreatedAt struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_CreatedAt_OrderExpr.
func (c _Post_CreatedAt) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_CreatedAt) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_CreatedAt) QuotedString() string {
	return c.qs
}

func (c _Post_CreatedAt) Eq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) NotEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) In(v ...time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) NotIn(v ...time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) Like(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_CreatedAt) NotLike(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_CreatedAt) Lt(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) LtOrEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) Gt(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) GtOrEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_CreatedAt) Between(v1, v2 time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_CreatedAt) NotBetween(v1, v2 time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_CreatedAt) Asc() PostOrderExpr {
	return _Post_CreatedAt_OrderExpr(c.QuotedString())
}

func (c _Post_CreatedAt) Desc() PostOrderExpr {
	return _Post_CreatedAt_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_UpdatedAt_OrderExpr string

func (s _Post_UpdatedAt_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_UpdatedAt struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_UpdatedAt_OrderExpr.
func (c _Post_UpdatedAt) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_UpdatedAt) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_UpdatedAt) QuotedString() string {
	return c.qs
}

func (c _Post_UpdatedAt) Eq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) NotEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) In(v ...time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) NotIn(v ...time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) Like(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_UpdatedAt) NotLike(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_UpdatedAt) Lt(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) LtOrEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) Gt(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) GtOrEq(v time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_UpdatedAt) Between(v1, v2 time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_UpdatedAt) NotBetween(v1, v2 time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_UpdatedAt) Asc() PostOrderExpr {
	return _Post_UpdatedAt_OrderExpr(c.QuotedString())
}

func (c _Post_UpdatedAt) Desc() PostOrderExpr {
	return _Post_UpdatedAt_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_DeletedAt_OrderExpr string

func (s _Post_DeletedAt_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_DeletedAt struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_DeletedAt_OrderExpr.
func (c _Post_DeletedAt) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_DeletedAt) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_DeletedAt) QuotedString() string {
	return c.qs
}

func (c _Post_DeletedAt) Eq(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) NotEq(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) In(v ...*time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) NotIn(v ...*time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) Like(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_DeletedAt) NotLike(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_DeletedAt) Lt(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) LtOrEq(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) Gt(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) GtOrEq(v *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_DeletedAt) Between(v1, v2 *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_DeletedAt) NotBetween(v1, v2 *time.Time) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_DeletedAt) Asc() PostOrderExpr {
	return _Post_DeletedAt_OrderExpr(c.QuotedString())
}

func (c _Post_DeletedAt) Desc() PostOrderExpr {
	return _Post_DeletedAt_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_BlogID_OrderExpr string

func (s _Post_BlogID_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_BlogID struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_BlogID_OrderExpr.
func (c _Post_BlogID) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_BlogID) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_BlogID) QuotedString() string {
	return c.qs
}

func (c _Post_BlogID) Eq(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_BlogID) NotEq(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_BlogID) In(v ...github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_BlogID) NotIn(v ...github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_BlogID) Like(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_BlogID) NotLike(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_BlogID) Lt(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_BlogID) LtOrEq(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_BlogID) Gt(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_BlogID) GtOrEq(v github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_BlogID) Between(v1, v2 github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_BlogID) NotBetween(v1, v2 github_com_satori_go_uuid.UUID) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_BlogID) Asc() PostOrderExpr {
	return _Post_BlogID_OrderExpr(c.QuotedString())
}

func (c _Post_BlogID) Desc() PostOrderExpr {
	return _Post_BlogID_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_PostID_OrderExpr string

func (s _Post_PostID_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_PostID struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_PostID_OrderExpr.
func (c _Post_PostID) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_PostID) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_PostID) QuotedString() string {
	return c.qs
}

func (c _Post_PostID) Eq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_PostID) NotEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_PostID) In(v ...int) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_PostID) NotIn(v ...int) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_PostID) Like(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_PostID) NotLike(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_PostID) Lt(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_PostID) LtOrEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_PostID) Gt(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_PostID) GtOrEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_PostID) Between(v1, v2 int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_PostID) NotBetween(v1, v2 int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_PostID) Asc() PostOrderExpr {
	return _Post_PostID_OrderExpr(c.QuotedString())
}

func (c _Post_PostID) Desc() PostOrderExpr {
	return _Post_PostID_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_Title_OrderExpr string

func (s _Post_Title_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_Title struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_Title_OrderExpr.
func (c _Post_Title) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_Title) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_Title) QuotedString() string {
	return c.qs
}

func (c _Post_Title) Eq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Title) NotEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Title) In(v ...string) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Title) NotIn(v ...string) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Title) Like(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_Title) NotLike(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_Title) Lt(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_Title) LtOrEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_Title) Gt(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_Title) GtOrEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_Title) Between(v1, v2 string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Title) NotBetween(v1, v2 string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Title) Asc() PostOrderExpr {
	return _Post_Title_OrderExpr(c.QuotedString())
}

func (c _Post_Title) Desc() PostOrderExpr {
	return _Post_Title_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_Content_OrderExpr string

func (s _Post_Content_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_Content struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_Content_OrderExpr.
func (c _Post_Content) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_Content) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_Content) QuotedString() string {
	return c.qs
}

func (c _Post_Content) Eq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Content) NotEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Content) In(v ...string) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Content) NotIn(v ...string) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Content) Like(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_Content) NotLike(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_Content) Lt(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_Content) LtOrEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_Content) Gt(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_Content) GtOrEq(v string) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_Content) Between(v1, v2 string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Content) NotBetween(v1, v2 string) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Content) Asc() PostOrderExpr {
	return _Post_Content_OrderExpr(c.QuotedString())
}

func (c _Post_Content) Desc() PostOrderExpr {
	return _Post_Content_OrderExpr(c.QuotedString() + " DESC")
}

type _Post_Order_OrderExpr string

func (s _Post_Order_OrderExpr) PostOrderExpr() string {
	return string(s)
}

type _Post_Order struct {
	bs string
	qs string
}

// PostColumnExpr implements _Post_Order_OrderExpr.
func (c _Post_Order) PostColumnExpr() string {
	return c.QuotedString()
}

// String gets bare column name.
func (c _Post_Order) String() string {
	return c.bs
}

// QuotedString gets quoted column name.
func (c _Post_Order) QuotedString() string {
	return c.qs
}

func (c _Post_Order) Eq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Order) NotEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Order) In(v ...int) PostSqlizer {
	return &_PostSqlizer{squirrel.Eq{c.QuotedString(): v}}
}

func (c _Post_Order) NotIn(v ...int) PostSqlizer {
	return &_PostSqlizer{squirrel.NotEq{c.QuotedString(): v}}
}

func (c _Post_Order) Like(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" LIKE ?", v)}
}

func (c _Post_Order) NotLike(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT LIKE ?", v)}
}

func (c _Post_Order) Lt(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Lt{c.QuotedString(): v}}
}

func (c _Post_Order) LtOrEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.LtOrEq{c.QuotedString(): v}}
}

func (c _Post_Order) Gt(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.Gt{c.QuotedString(): v}}
}

func (c _Post_Order) GtOrEq(v int) PostSqlizer {
	return &_PostSqlizer{squirrel.GtOrEq{c.QuotedString(): v}}
}

func (c _Post_Order) Between(v1, v2 int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Order) NotBetween(v1, v2 int) PostSqlizer {
	return &_PostSqlizer{squirrel.Expr(c.QuotedString()+" NOT BETWEEN ? AND ?", v1, v2)}
}

func (c _Post_Order) Asc() PostOrderExpr {
	return _Post_Order_OrderExpr(c.QuotedString())
}

func (c _Post_Order) Desc() PostOrderExpr {
	return _Post_Order_OrderExpr(c.QuotedString() + " DESC")
}

type PostDBSet struct {
	dbc *goen.DBContext

	CreatedAt _Post_CreatedAt
	UpdatedAt _Post_UpdatedAt
	DeletedAt _Post_DeletedAt
	BlogID    _Post_BlogID
	PostID    _Post_PostID
	Title     _Post_Title
	Content   _Post_Content
	Order     _Post_Order

	IncludeBlog goen.IncludeLoader
}

func newPostDBSet(dbc *goen.DBContext) *PostDBSet {
	dbset := &PostDBSet{
		dbc: dbc,
	}
	dbset.CreatedAt = _Post_CreatedAt{"created_at", dbc.Dialect().Quote("created_at")}
	dbset.UpdatedAt = _Post_UpdatedAt{"updated_at", dbc.Dialect().Quote("updated_at")}
	dbset.DeletedAt = _Post_DeletedAt{"deleted_at", dbc.Dialect().Quote("deleted_at")}
	dbset.BlogID = _Post_BlogID{"blog_id", dbc.Dialect().Quote("blog_id")}
	dbset.PostID = _Post_PostID{"post_id", dbc.Dialect().Quote("post_id")}
	dbset.Title = _Post_Title{"title", dbc.Dialect().Quote("title")}
	dbset.Content = _Post_Content{"content", dbc.Dialect().Quote("content")}
	dbset.Order = _Post_Order{"order", dbc.Dialect().Quote("order")}

	dbset.IncludeBlog = goen.IncludeLoaderFunc(dbset.includeBlog)

	return dbset
}

// String gets bare table name
func (dbset *PostDBSet) String() string {
	return "posts"
}

// QuotedString gets quoted table name
func (dbset *PostDBSet) QuotedString() string {
	return dbset.dbc.Dialect().Quote("posts")
}

func (dbset *PostDBSet) Insert(v *Post) {
	dbset.dbc.Patch(metaSchema.InsertPatchOf(v))
}

func (dbset *PostDBSet) Select() PostQueryBuilder {
	return newPostQueryBuilder(dbset.dbc)
}

func (dbset *PostDBSet) Update(v *Post) {
	dbset.dbc.Patch(metaSchema.UpdatePatchOf(v))
}

func (dbset *PostDBSet) Delete(v *Post) {
	dbset.dbc.Patch(metaSchema.DeletePatchOf(v))
}

func (dbset *PostDBSet) includeBlog(ctx context.Context, later *goen.IncludeBuffer, sc *goen.ScopeCache, records interface{}) error {
	entities, ok := records.([]*Post)
	if !ok {
		return nil
	}

	parentRowKeyOf := func(v *Post) goen.RowKey {
		return &goen.MapRowKey{
			Table: "blogs",
			Key: map[string]interface{}{
				"blog_id": v.BlogID,
			},
		}
	}

	// filter cached entity
	cachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
	noCachedChildRowKeys := make([]goen.RowKey, 0, len(entities))
	for _, entity := range entities {
		key := parentRowKeyOf(entity)
		if sc.HasObject(goen.CardinalityManyToOne, key) {
			cachedChildRowKeys = append(cachedChildRowKeys, key)
		} else {
			noCachedChildRowKeys = append(noCachedChildRowKeys, key)
		}
	}
	if len(noCachedChildRowKeys) > 0 {
		cond := squirrel.Or{}
		for _, rowKey := range noCachedChildRowKeys {
			cond = append(cond, rowKey)
		}
		stmtBuilder := squirrel.StatementBuilder.PlaceholderFormat(dbset.dbc.Dialect().PlaceholderFormat())
		query, args, err := stmtBuilder.Select(
			dbset.dbc.Dialect().Quote("blog_id"),
			dbset.dbc.Dialect().Quote("name"),
			dbset.dbc.Dialect().Quote("author"),
		).From(dbset.dbc.Dialect().Quote("blogs")).Where(cond).ToSql()
		if err != nil {
			return err
		}
		rows, err := dbset.dbc.QueryContext(ctx, query, args...)
		if err != nil {
			return err
		}

		var noCachedEntities []*Blog
		if err := dbset.dbc.Scan(rows, &noCachedEntities); err != nil {
			rows.Close()
			return err
		}
		rows.Close()

		for _, entity := range noCachedEntities {
			sc.AddObject(entity)
		}

		// for newly loaded entity, to be filled by includeLoader
		later.AddRecords(noCachedEntities)
	}

	for _, entity := range entities {
		parentRowKey := parentRowKeyOf(entity)
		raw := sc.GetObject(goen.CardinalityManyToOne, parentRowKey)
		if castover, ok := raw.(*Blog); ok {
			entity.Blog = castover
		}
	}

	return nil
}

type DBContext struct {
	*goen.DBContext

	Blog *BlogDBSet

	Post *PostDBSet
}

func NewDBContext(dialectName string, db *sql.DB) *DBContext {
	dbc := goen.NewDBContext(dialectName, db)
	return &DBContext{
		DBContext: dbc,
		Blog:      newBlogDBSet(dbc),
		Post:      newPostDBSet(dbc),
	}
}

func (dbc *DBContext) UseTx(tx *sql.Tx) *DBContext {
	clone := dbc.DBContext.UseTx(tx)
	return &DBContext{
		DBContext: clone,
		Blog:      newBlogDBSet(clone),
		Post:      newPostDBSet(clone),
	}
}
